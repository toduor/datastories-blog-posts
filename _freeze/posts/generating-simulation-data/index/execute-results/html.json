{
  "hash": "ed1af07bd2bb6fdc5647ec92f9fe7ae6",
  "result": {
    "markdown": "---\ntitle: \"Generating data for simulation studies\"\nauthor: \"Tony Henry Oduor\"\ndate: \"2023-11-04\"\ncategories: [news, code, analysis]\nimage: \"simulationpng.png\"\nexecute: \n  warning: false\ntitle-block-banner: true\n---\n\n\n# Introduction \n\nSimulation studies are a powerful tool in various fields, including statistics, engineering, and computer science. They involve the creation of virtual experiments to model real-world phenomena. By mimicking complex systems through computational algorithms, researchers can gain valuable insights into the behavior and performance of these systems under different conditions. Simulation studies enable the exploration of scenarios that might be impractical or costly to conduct in a physical setting. This method provides a controlled environment to test hypotheses, evaluate the effectiveness of different strategies, and assess the robustness of models. Through the analysis of simulated data, researchers can make informed decisions, refine their models, and ultimately enhance our understanding of intricate, dynamic processes in a wide range of disciplines.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Loading Libraries\nlibs<-c(\"stringr\",\"haven\",\"readxl\",\"splitstackshape\",\"dplyr\",\"tidyr\",\"foreign\",\"data.table\",\"ggplot2\",\n        \"pwr\",\"pacman\",\"flextable\")\nfor (lib in libs) {\n  if(!require(lib,character.only = T)) {\n    install.packages(lib,dependencies = T) }\n  #update.packages(lib)\n  library(lib,character.only = T) }\n```\n:::\n\n\n# Example 1 - Randomization\n\nIn this illustration, we create a function called \"assign_recipients\" designed for allocating participants to specific Study arms. This scenario is particularly applicable in clinical trial studies where participants are randomly assigned to various treatment groups. In our instance, participants are randomized into three distinct arms: A, B, and C. The function provides researchers the flexibility to specify the allocation proportions for each study arm. Additionally, it ensures that the total distribution sums up to 100%.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Clearing environment\nrm(list = ls())\n\n#Beginning of function\nassign_recipients <- function(namelist,distribution)\n  { \n  \n  N <-length(namelist)\n  lisnm<-data.frame(namelist)\n  \n  if(sum(distribution)==1)\n    {\n  list<-c(rep(\"A\",round(distribution[1]*N)),rep(\"B\",round(distribution[2]*N)),rep(\"C\",round(distribution[3]*N)))\n  \n  if(N%%2==1)\n    {\n    \n    lisnm$Config<-sample(x=list,size=N)\n    } \n  else \n    {\n      lisnm$Config<-sample(x=list,size=N,replace = TRUE)\n    }\n  \n   print(lisnm)\n   \n  }\n  else {\n    \n    print(\"Check distribution: Not summing up to 1\")\n    \n  }\n}\n\n#End of function\n```\n:::\n\n\n# Function Performance\n\nWe assess the function's performance by providing varied names and distributing them with a breakdown of 20% for arm A, 30% for arm B, and 50% for arm C.\n\n::: {.cell}\n\n```{.r .cell-code}\n#######Test cases\n#Setting seed \nset.seed(202201)\n\n#Test names\nnames<-c(\"Mathew\",\"Ian\",\"Magdaline\",\"Rose\",\"Bella\",\"Rahima\",\"Michael\",\"Mark\",\n         \"Violet\",\"Margaret\",\"John\",\"Milly\",\"Ken\")\n\n#Target distribution\ntarget_distribution <-c(.20,.30,.50)\n\n#Output assignment\nassign_recipients(names,target_distribution)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    namelist Config\n1     Mathew      A\n2        Ian      A\n3  Magdaline      B\n4       Rose      C\n5      Bella      B\n6     Rahima      C\n7    Michael      C\n8       Mark      C\n9     Violet      B\n10  Margaret      C\n11      John      B\n12     Milly      C\n13       Ken      A\n```\n:::\n:::\n\n\n\n# Example 2 - Linear model\n\nIn the second example, our aim is to create a dataset of 1000 data points for the dependent variable, x, within the range of 1 to 2. Subsequently, we will compute corresponding values for the independent variable, y, and generate a graphical representation of the relationship between y and x.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Number samples\nn<-1000\n\n#Setting up simulation data\ndata<-data.frame(no=1:n,x=NA)\n\nfor (i in 1:n) {\n  \n  #Generating x values\ndata$x[i]<-runif(n,min = 1,max = 2)\n\n  #Generating y values\ndata$y[i]<-2 +(-0.95)*data$x[i]+rnorm(1,sd=0.5)\n\n}\n\n\n#Plot of simulation data\nggplot(data,aes(x=x,y=y)) + geom_point(color=\"steelblue\") + \n  labs(title = \"Plot of simulation data\",x= \"x values\",y =\"y values\") +\n  theme(axis.title=element_text(size=15),\nplot.title = element_text(hjust = 0.5),axis.text = element_text(size=15))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}